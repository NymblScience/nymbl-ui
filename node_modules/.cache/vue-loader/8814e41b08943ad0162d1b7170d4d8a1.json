{"remainingRequest":"/home/runner/work/nymbl-ui/nymbl-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/nymbl-ui/nymbl-ui/src/components/NTable.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/runner/work/nymbl-ui/nymbl-ui/src/components/NTable.vue","mtime":1585661990411},{"path":"/home/runner/work/nymbl-ui/nymbl-ui/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/nymbl-ui/nymbl-ui/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/runner/work/nymbl-ui/nymbl-ui/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/runner/work/nymbl-ui/nymbl-ui/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/nymbl-ui/nymbl-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/nymbl-ui/nymbl-ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import \"@/assets/sass/animations.scss\";\n@import \"@/assets/sass/colors.scss\";\n@import \"@/assets/sass/config.scss\";\n\n.active {\n  color: green;\n}\n\n.n-table-empty {\n  text-align: center;\n  width: 100%;\n  padding: 2rem 0;\n  font-size: 1.3rem;\n}\n\n.n-table-row {\n  border-bottom: 1px solid #ebeef5;\n  display: flex;\n  flex-wrap: wrap;\n  font-size: 1rem;\n  transition: background-color 0.25s ease;\n\n  &:hover {\n    background: #e9fdfe;\n  }\n  &.is-expanded {\n    &:hover {\n      background: unset;\n    }\n  }\n}\n",{"version":3,"sources":["NTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwcA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"NTable.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div\n    ref=\"n-table\"\n    class=\"n-table\"\n    :class=\"classes\"\n    v-bind=\"$attrs\"\n    :style=\"isEmpty ? null : { 'padding-bottom': rowPadding + 'px' }\"\n    v-on=\"$listeners\"\n  >\n    <n-table-header\n      v-if=\"loaded && labels.length > 0\"\n      :labels=\"labels\"\n      :sort-order=\"sortOrder\"\n      :sorted-by=\"sortedBy\"\n      :is-expandable=\"isExpandable\"\n      :expand-width=\"expandWidth\"\n      :slots=\"$slots\"\n      @changeSort=\"changeSort\"\n    />\n\n    <n-table-rows ref=\"rows\">\n      <div v-if=\"isEmpty\" class=\"n-table-empty\">\n        <span v-if=\"!loading && !isFiltezred && filter.value.length === 0\">\n          {{ emptyText }}\n        </span>\n        <span v-else-if=\"!loading\">{{ notFoundText }}</span>\n        <span v-else>Loading...</span>\n      </div>\n\n      <n-table-row v-if=\"isEmpty\" v-show=\"false\" :is-empty=\"isEmpty\">\n        <slot :row=\"{}\"></slot>\n      </n-table-row>\n\n      <n-table-row\n        v-for=\"(row, index) in rows\"\n        :key=\"index.toString()\"\n        :class=\"getRowClasses(row, index)\"\n        @click.native=\"$emit('row-click', row, index, $event)\"\n        @mounted=\"isRowLoaded(index + 1)\"\n      >\n        <n-table-column-expand\n          v-if=\"isExpandable\"\n          :id=\"index.toString()\"\n          ref=\"expand\"\n          :expanded-rows=\"expandedRows\"\n          :expand-width=\"expandWidth\"\n          @expand=\"toggleExpand(index.toString())\"\n        />\n\n        <slot :row=\"row\" :index=\"index\" />\n\n        <n-table-row-expand\n          v-if=\"isExpandable\"\n          :id=\"index.toString()\"\n          :expand-width=\"expandWidth\"\n          :expanded-rows=\"expandedRows\"\n        >\n          <slot :row=\"row\" name=\"expanded\" />\n        </n-table-row-expand>\n      </n-table-row>\n    </n-table-rows>\n  </div>\n</template>\n<script>\nimport NTableHeader from \"./NTableHeader.vue\";\nimport NTableRows from \"./NTableRows.vue\";\nimport NTableRow from \"./NTableRow.vue\";\nimport NTableRowExpand from \"./NTableRowExpand.vue\";\nimport NTableColumnExpand from \"./NTableColumnExpand.vue\";\nimport stickybits from \"stickybits\";\nimport orderBy from \"../helpers/orderBy\";\n// import { v4 as uuidv4 } from \"uuid\";\n\nexport default {\n  name: \"NTable\",\n  components: {\n    NTableHeader,\n    NTableRow,\n    NTableRows,\n    NTableRowExpand,\n    NTableColumnExpand\n  },\n  props: {\n    /**\n     * Table data\n     */\n    data: {\n      default: function() {\n        return [];\n      },\n      type: Array\n    },\n    loading: {\n      default: false,\n      type: Boolean\n    },\n    isExpandable: {\n      default: false,\n      type: Boolean\n    },\n    stickyHeader: {\n      default: false,\n      type: Boolean\n    },\n    stickyHeaderOffset: {\n      default: 0,\n      type: Number\n    },\n    isFiltered: {\n      default: false,\n      type: Boolean\n    },\n\n    filter: {\n      default: () => {\n        return { props: [], value: \"\" };\n      },\n      type: Object\n    },\n    /**\n     * Sort by property, optionally specifify the order\n     */\n    sortBy: {\n      default: () => {\n        return { prop: \"\", order: \"ascending\" };\n      },\n      type: Object\n    },\n    align: {\n      default: \"left\",\n      type: String\n    },\n    labelAlign: {\n      default: \"left\",\n      type: String\n    },\n    /**\n     * Specify empty text\n     */\n    emptyText: {\n      default: \"No Entries\",\n      type: String\n    },\n    /**\n     * Specify empty text\n     */\n    notFoundText: {\n      default: \"No Entries Found\",\n      type: String\n    },\n    /**\n     * Specify row class. e.g. getRowClass(row, index)\n     */\n    rowClass: {\n      default: null,\n      type: Function\n    },\n    /**\n     * Disable sorting. Used whenever back-end does the sorting.\n     */\n    sortDisabled: {\n      default: false,\n      type: Boolean\n    },\n    /**\n     * Enable/Disable url Queries. Vue $router has to be included.\n     */\n    urlQueries: {\n      default: false,\n      type: Boolean\n    }\n  },\n  data() {\n    return {\n      loaded: false,\n      sortedBy: \"\",\n      sortOrder: \"ascending\",\n      sortMethod: null,\n      expandedRows: [],\n      expandWidth: 50,\n      rowLoaded: 30\n    };\n  },\n  computed: {\n    classes() {\n      const classes = [];\n      return classes;\n    },\n    rowPadding() {\n      if (this.data && this.rows) {\n        return (this.data.length - this.rows.length) * 90;\n      }\n      return 0;\n    },\n    children() {\n      // #TODO Add protection that just column elements are valid children.\n      if (this.loaded && !this.isEmpty && this.$refs.rows) {\n        return this.$refs.rows.$children;\n      }\n      return [];\n    },\n    labels() {\n      let labels = [];\n\n      if (this.isEmpty) {\n        return labels;\n      }\n\n      const createLabel = column => {\n        return {\n          label: column._props.label,\n          sortable: column._props.sortable,\n          prop: column._props.prop,\n          align: column._props.align,\n          labelAlign: column._props.align,\n          maxWidth: column._props.maxWidth,\n          minWidth: column._props.minWidth,\n          customHeader: column._props.customHeader,\n          sortMethod: column._props.sortMethod,\n          borderRight: column._props.borderRight,\n          isNested: column._props.isNested,\n          nestedWidth: column._props.nestedWidth,\n          // Get nested columns as children\n          labels: column._props.isNested ? getLabels(column) : []\n        };\n      };\n\n      const getLabels = column2 => {\n        let labels = [];\n\n        for (const column of column2.$children) {\n          if (column.$options._componentTag === \"n-table-column\") {\n            labels.push(createLabel(column));\n          } else if (column.$options._componentTag.includes(\"user-list\")) {\n            labels.push(getLabels(column)[0]);\n          }\n        }\n\n        return labels;\n      };\n\n      if (this.children[0]) {\n        labels = getLabels(this.children[0]);\n      }\n\n      return labels;\n    },\n    rows() {\n      let data = [...this.data];\n\n      if (this.sortedBy && !this.sortDisabled) {\n        data = orderBy(this.sortedBy, data, this.sortMethod);\n      }\n\n      if (this.filter.value) {\n        data = this.filterRows(data);\n      }\n\n      // Add Id for Vue Key.add\n      // if (this.isExpandable) {\n      //   data.forEach(row => (row.key = uuidv4()));\n      // }\n\n      if (this.sortOrder === \"descending\" && !this.sortDisabled) {\n        return data.reverse();\n      }\n\n      return data.slice(0, this.rowLoaded);\n    },\n    isEmpty() {\n      return this.rows.length < 1;\n    },\n    sortQueries() {\n      return {\n        sortedBy: this.$route.query.sortedBy,\n        sortOrder: this.$route.query.sortOrder\n      };\n    }\n  },\n\n  watch: {\n    sortQueries: {\n      immediate: false,\n      deep: true,\n      handler(newSortQueries) {\n        if (this.urlQueries) {\n          this.changeSort(newSortQueries.sortedBy, newSortQueries.sortOrder);\n        }\n      }\n    }\n  },\n\n  mounted() {\n    this.loaded = true;\n    if (this.stickyHeader) {\n      this.createStickyHeader(0);\n    }\n\n    if (this.sortBy.order) {\n      this.sortOrder = this.sortBy.order;\n    }\n\n    if (this.sortBy.prop) {\n      this.sortedBy = this.sortBy.prop;\n    }\n\n    // Add sort order to URL\n    if (this.urlQueries) {\n      if (this.$route.query.sortedBy) {\n        this.changeSort(\n          this.$route.query.sortedBy,\n          this.$route.query.sortOrder\n        );\n      } else {\n        this.$router.push({\n          query: {\n            ...this.$route.query,\n            sortedBy: this.sortedBy,\n            sortOrder: this.sortOrder\n          }\n        });\n      }\n    }\n  },\n\n  methods: {\n    filterRows(data) {\n      const props =\n        this.filter.props.length < 1 ? Object.keys(data[0]) : this.filter.props;\n\n      return data.filter(data =>\n        props.some(prop =>\n          data[prop]\n            ? data[prop].toLowerCase().includes(this.filter.value.toLowerCase())\n            : false\n        )\n      );\n    },\n    isRowLoaded(index) {\n      const that = this;\n\n      if (index % 30 == 0) {\n        setTimeout(function() {\n          that.rowLoaded = index + 30;\n        }, 0);\n      }\n    },\n\n    createStickyHeader(timeout = 100) {\n      const that = this;\n      // Fixed header for the table component\n      setTimeout(() => {\n        stickybits(\".n-table-header\", {\n          stickyBitStickyOffset: that.stickyHeaderOffset,\n          useStickyClasses: true\n        });\n      }, timeout);\n    },\n    updateStickyHeader(timeout = 0) {\n      setTimeout(function() {\n        const stickybitsInstancetoBeUpdated = stickybits(\".n-table-header\");\n        console.log(\n          \"stickybitsInstancetoBeUpdated :\",\n          stickybitsInstancetoBeUpdated\n        );\n        stickybitsInstancetoBeUpdated.update();\n      }, timeout);\n    },\n    changeSort(\n      property,\n      sortOrder = \"ascending\",\n      sortMethod,\n      isHeader = false\n    ) {\n      if (sortOrder === \"toggle\") {\n        if (this.sortOrder === \"ascending\") {\n          sortOrder = \"descending\";\n        } else {\n          sortOrder = \"ascending\";\n        }\n      }\n\n      if (isHeader) {\n        this.$router.push({\n          query: {\n            ...this.$route.query,\n            page: 1\n          }\n        });\n      }\n\n      let current = {\n        sortedBy: this.sortedBy,\n        sortOrder: this.sortOrder\n      };\n      let next = {\n        sortedBy: property,\n        sortOrder: sortOrder\n      };\n\n      if (JSON.stringify(next) === JSON.stringify(current)) {\n        console.log(\"returned\");\n        return;\n      }\n\n      // Add to URL query\n      if (this.urlQueries) {\n        this.$router.push({\n          query: {\n            ...this.$route.query,\n            sortedBy: property,\n            sortOrder: sortOrder\n          }\n        });\n      }\n\n      this.sortedBy = property;\n      this.sortOrder = sortOrder;\n\n      if (sortMethod) {\n        this.sortMethod = sortMethod;\n      } else {\n        this.sortMethod = false;\n      }\n\n      this.$emit(\"sort\", {\n        sortedBy: this.sortedBy,\n        sortOrder: this.sortOrder\n      });\n    },\n    getRowClasses(row, index) {\n      let classes = [];\n      if (this.rowClass) {\n        classes = this.rowClass(row, index).split(\" \");\n      }\n\n      if (this.expandedRows.includes(index.toString())) {\n        classes.push(\"is-expanded\");\n      }\n\n      return classes.join(\" \");\n    },\n    toggleExpand(key, close = false) {\n      const expandedRows = [...this.expandedRows];\n      if (expandedRows.includes(key) || close) {\n        this.expandedRows = expandedRows.filter(row => row !== key);\n        this.$emit(\"expand\", \"closed\", key);\n      } else {\n        this.expandedRows.push(key);\n        this.$emit(\"expand\", \"expanded\", key);\n      }\n    }\n  }\n};\n</script>\n<style lang=\"scss\">\n@import \"@/assets/sass/animations.scss\";\n@import \"@/assets/sass/colors.scss\";\n@import \"@/assets/sass/config.scss\";\n\n.active {\n  color: green;\n}\n\n.n-table-empty {\n  text-align: center;\n  width: 100%;\n  padding: 2rem 0;\n  font-size: 1.3rem;\n}\n\n.n-table-row {\n  border-bottom: 1px solid #ebeef5;\n  display: flex;\n  flex-wrap: wrap;\n  font-size: 1rem;\n  transition: background-color 0.25s ease;\n\n  &:hover {\n    background: #e9fdfe;\n  }\n  &.is-expanded {\n    &:hover {\n      background: unset;\n    }\n  }\n}\n</style>\n"]}]}