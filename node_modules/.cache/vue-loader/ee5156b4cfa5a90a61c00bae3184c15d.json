{"remainingRequest":"/home/runner/work/nymbl-ui/nymbl-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/nymbl-ui/nymbl-ui/src/components/NPopover.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/runner/work/nymbl-ui/nymbl-ui/src/components/NPopover.vue","mtime":1585661990411},{"path":"/home/runner/work/nymbl-ui/nymbl-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/runner/work/nymbl-ui/nymbl-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/nymbl-ui/nymbl-ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport tippy from \"tippy.js\";\n\nimport classlist from \"../helpers/classlist\";\nimport elementRef from \"../helpers/element-ref\";\nimport events from \"../helpers/events\";\nimport NFocusContainer from \"./NFocusContainer.vue\";\n\nexport default {\n  name: \"NPopover\",\n\n  components: {\n    NFocusContainer\n  },\n\n  props: {\n    animation: {\n      type: String,\n      default: \"fade\" // 'fade', 'shift-away', 'scale', or 'none'\n    },\n    appendToBody: {\n      type: Boolean,\n      default: true\n    },\n    closeOnScroll: {\n      type: Boolean,\n      default: true\n    },\n    constrainToScrollParent: {\n      type: Boolean,\n      default: true\n    },\n    containFocus: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    focusRedirector: Function,\n    openOn: {\n      type: String,\n      default: \"click\" // 'click', 'mouseenter', 'focus', or 'manual', plus 'hover' (compat)\n    },\n    position: {\n      type: String,\n      default: \"bottom-start\"\n    },\n    raised: {\n      type: Boolean,\n      default: true\n    },\n    ingoreOnClick: {\n      type: String,\n      default: \"\"\n    },\n    trigger: {\n      validator(value) {\n        return elementRef.validate(\n          value,\n          '[UiPopover]: Invalid prop: \"trigger\". Expected Element, VueComponent or CSS selector string which matches an existing element.'\n        );\n      }\n    }\n  },\n\n  data() {\n    return {\n      returnFocus: false\n    };\n  },\n\n  watch: {\n    disabled(value) {\n      if (this.tip) {\n        if (value === true) {\n          this.tip.disable();\n        } else {\n          this.tip.enable();\n        }\n      }\n    }\n  },\n\n  created() {\n    this.tip = null;\n  },\n\n  mounted() {\n    this.setupPopover();\n  },\n\n  beforeDestroy() {\n    this.destroyPopover();\n  },\n\n  methods: {\n    setupPopover() {\n      this.triggerEl = elementRef.resolve(this.trigger, this.$el.parentElement);\n\n      if (!this.triggerEl) {\n        // console.error(\"[UiPopover]: Trigger element not found.\");\n        return;\n      }\n\n      const options = {\n        animateFill: false,\n        // Use 'fade' when animation is 'none', as 'none' it's not a valid Tippy.js option.\n        // The effect of no transition is achieved by `duration: 0` below.\n        animation: this.animation === \"none\" ? \"fade\" : this.animation,\n        appendTo: this.appendToBody\n          ? document.body\n          : this.triggerEl.parentElement,\n        arrow: false,\n        content: this.$el,\n        delay: [0, 0],\n        distance: 0,\n        duration: this.animation === \"none\" ? 0 : [250, 200],\n        hideOnClick: false,\n        // ignoreAttributes: true,\n        interactive: true,\n        lazy: true,\n        maxWidth: \"100%\",\n        multiple: true,\n        onHidden: this.onHidden,\n        onHide: this.onClose,\n        onShow: this.onOpen,\n        onShown: this.onShown,\n        placement: this.position,\n        // role: \"tooltip\",\n        theme: \"ui-popover\",\n        autoFocus: false,\n        trigger: this.openOn.replace(\"hover\", \"mouseenter\"),\n        popperOptions: {\n          modifiers: {\n            computeStyle: {\n              // Disable GPU acceleration to fix blurry text in popover on Windows (Chrome)\n              // https://github.com/twbs/bootstrap/issues/23590\n              gpuAcceleration: !(\n                window.devicePixelRatio < 1.5 && /Win/.test(navigator.platform)\n              )\n            }\n          }\n        }\n      };\n\n      if (!this.constrainToScrollParent) {\n        options.popperOptions.modifiers.preventOverflow = { enabled: false };\n        options.popperOptions.modifiers.hide = { enabled: false };\n      }\n      this.tip = tippy(this.triggerEl, options);\n\n      if (this.disabled) {\n        this.tip.disable();\n      }\n    },\n\n    destroyPopover() {\n      if (this.tip) {\n        this.removeCloseEventListeners();\n        this.triggerEl._tippy.destroy();\n        this.tip = null;\n      }\n    },\n\n    isOpen() {\n      return this.tip && this.triggerEl._tippy.state.isVisible;\n    },\n\n    open() {\n      if (this.tip) {\n        this.triggerEl._tippy.show();\n      }\n    },\n\n    close(options = { returnFocus: true }) {\n      if (this.tip) {\n        this.returnFocus = options.returnFocus;\n        this.triggerEl._tippy.hide();\n      }\n    },\n\n    toggle(options = { returnFocus: true }) {\n      if (this.tip) {\n        this.returnFocus = options.returnFocus;\n        this.tip[this.isOpen() ? \"hide\" : \"show\"]();\n      }\n    },\n\n    scheduleUpdate() {\n      if (this.tip) {\n        this.tip.popperInstance.scheduleUpdate();\n      }\n    },\n\n    onOpen() {\n      this.addCloseEventListeners();\n\n      classlist.add(this.triggerEl, \"has-dropdown-open\");\n\n      this.$emit(\"open\");\n    },\n\n    onClose() {\n      if (this.returnFocus && this.lastFocusedElement) {\n        this.lastFocusedElement.focus();\n      }\n\n      this.removeCloseEventListeners();\n\n      classlist.remove(this.triggerEl, \"has-dropdown-open\");\n\n      this.$emit(\"close\");\n\n      // Reset return focus\n      this.returnFocus = true;\n    },\n\n    onShown() {\n      this.lastFocusedElement = document.activeElement;\n      // this.$refs.focusContainer.focus();\n      this.$emit(\"reveal\");\n    },\n\n    onHidden() {\n      this.$emit(\"hide\");\n    },\n\n    closeOnExternal(event, closeOptions) {\n      if (!this.$el.contains(event.target)) {\n        this.close(closeOptions);\n      }\n    },\n\n    addCloseEventListeners() {\n      this.removeCloseEventListeners();\n\n      // Add event listeners in the next tick, otherwise they're triggered immediately\n      setTimeout(() => {\n        this.removeExternalClickListener = events.on(\"click\", document, e => {\n          this.closeOnExternal(e, { returnFocus: false });\n        });\n\n        this.removeEscListener = events.onKeydown(27, document, () => {\n          this.close({ returnFocus: true });\n        });\n\n        if (this.closeOnScroll) {\n          this.removeScrollListener = events.on(\"scroll\", document, e => {\n            this.closeOnExternal(e, { returnFocus: true });\n          });\n        }\n      }, 0);\n    },\n\n    removeCloseEventListeners() {\n      if (this.removeExternalClickListener) {\n        this.removeExternalClickListener();\n        this.removeExternalClickListener = null;\n      }\n\n      if (this.removeEscListener) {\n        this.removeEscListener();\n        this.removeEscListener = null;\n      }\n\n      if (this.removeScrollListener) {\n        this.removeScrollListener();\n        this.removeScrollListener = null;\n      }\n    }\n  }\n};\n",{"version":3,"sources":["NPopover.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAefile":"NPopover.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <n-focus-container\n    ref=\"focusContainer\"\n    class=\"ui-popover\"\n    role=\"dialog\"\n    :class=\"{ 'is-raised': raised }\"\n    :contain-focus=\"containFocus\"\n    :focus-redirector=\"focusRedirector\"\n    @focus-overflow=\"close()\"\n  >\n    <slot></slot>\n  </n-focus-container>\n</template>\n\n<script>\nimport tippy from \"tippy.js\";\n\nimport classlist from \"../helpers/classlist\";\nimport elementRef from \"../helpers/element-ref\";\nimport events from \"../helpers/events\";\nimport NFocusContainer from \"./NFocusContainer.vue\";\n\nexport default {\n  name: \"NPopover\",\n\n  components: {\n    NFocusContainer\n  },\n\n  props: {\n    animation: {\n      type: String,\n      default: \"fade\" // 'fade', 'shift-away', 'scale', or 'none'\n    },\n    appendToBody: {\n      type: Boolean,\n      default: true\n    },\n    closeOnScroll: {\n      type: Boolean,\n      default: true\n    },\n    constrainToScrollParent: {\n      type: Boolean,\n      default: true\n    },\n    containFocus: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    focusRedirector: Function,\n    openOn: {\n      type: String,\n      default: \"click\" // 'click', 'mouseenter', 'focus', or 'manual', plus 'hover' (compat)\n    },\n    position: {\n      type: String,\n      default: \"bottom-start\"\n    },\n    raised: {\n      type: Boolean,\n      default: true\n    },\n    ingoreOnClick: {\n      type: String,\n      default: \"\"\n    },\n    trigger: {\n      validator(value) {\n        return elementRef.validate(\n          value,\n          '[UiPopover]: Invalid prop: \"trigger\". Expected Element, VueComponent or CSS selector string which matches an existing element.'\n        );\n      }\n    }\n  },\n\n  data() {\n    return {\n      returnFocus: false\n    };\n  },\n\n  watch: {\n    disabled(value) {\n      if (this.tip) {\n        if (value === true) {\n          this.tip.disable();\n        } else {\n          this.tip.enable();\n        }\n      }\n    }\n  },\n\n  created() {\n    this.tip = null;\n  },\n\n  mounted() {\n    this.setupPopover();\n  },\n\n  beforeDestroy() {\n    this.destroyPopover();\n  },\n\n  methods: {\n    setupPopover() {\n      this.triggerEl = elementRef.resolve(this.trigger, this.$el.parentElement);\n\n      if (!this.triggerEl) {\n        // console.error(\"[UiPopover]: Trigger element not found.\");\n        return;\n      }\n\n      const options = {\n        animateFill: false,\n        // Use 'fade' when animation is 'none', as 'none' it's not a valid Tippy.js option.\n        // The effect of no transition is achieved by `duration: 0` below.\n        animation: this.animation === \"none\" ? \"fade\" : this.animation,\n        appendTo: this.appendToBody\n          ? document.body\n          : this.triggerEl.parentElement,\n        arrow: false,\n        content: this.$el,\n        delay: [0, 0],\n        distance: 0,\n        duration: this.animation === \"none\" ? 0 : [250, 200],\n        hideOnClick: false,\n        // ignoreAttributes: true,\n        interactive: true,\n        lazy: true,\n        maxWidth: \"100%\",\n        multiple: true,\n        onHidden: this.onHidden,\n        onHide: this.onClose,\n        onShow: this.onOpen,\n        onShown: this.onShown,\n        placement: this.position,\n        // role: \"tooltip\",\n        theme: \"ui-popover\",\n        autoFocus: false,\n        trigger: this.openOn.replace(\"hover\", \"mouseenter\"),\n        popperOptions: {\n          modifiers: {\n            computeStyle: {\n              // Disable GPU acceleration to fix blurry text in popover on Windows (Chrome)\n              // https://github.com/twbs/bootstrap/issues/23590\n              gpuAcceleration: !(\n                window.devicePixelRatio < 1.5 && /Win/.test(navigator.platform)\n              )\n            }\n          }\n        }\n      };\n\n      if (!this.constrainToScrollParent) {\n        options.popperOptions.modifiers.preventOverflow = { enabled: false };\n        options.popperOptions.modifiers.hide = { enabled: false };\n      }\n      this.tip = tippy(this.triggerEl, options);\n\n      if (this.disabled) {\n        this.tip.disable();\n      }\n    },\n\n    destroyPopover() {\n      if (this.tip) {\n        this.removeCloseEventListeners();\n        this.triggerEl._tippy.destroy();\n        this.tip = null;\n      }\n    },\n\n    isOpen() {\n      return this.tip && this.triggerEl._tippy.state.isVisible;\n    },\n\n    open() {\n      if (this.tip) {\n        this.triggerEl._tippy.show();\n      }\n    },\n\n    close(options = { returnFocus: true }) {\n      if (this.tip) {\n        this.returnFocus = options.returnFocus;\n        this.triggerEl._tippy.hide();\n      }\n    },\n\n    toggle(options = { returnFocus: true }) {\n      if (this.tip) {\n        this.returnFocus = options.returnFocus;\n        this.tip[this.isOpen() ? \"hide\" : \"show\"]();\n      }\n    },\n\n    scheduleUpdate() {\n      if (this.tip) {\n        this.tip.popperInstance.scheduleUpdate();\n      }\n    },\n\n    onOpen() {\n      this.addCloseEventListeners();\n\n      classlist.add(this.triggerEl, \"has-dropdown-open\");\n\n      this.$emit(\"open\");\n    },\n\n    onClose() {\n      if (this.returnFocus && this.lastFocusedElement) {\n        this.lastFocusedElement.focus();\n      }\n\n      this.removeCloseEventListeners();\n\n      classlist.remove(this.triggerEl, \"has-dropdown-open\");\n\n      this.$emit(\"close\");\n\n      // Reset return focus\n      this.returnFocus = true;\n    },\n\n    onShown() {\n      this.lastFocusedElement = document.activeElement;\n      // this.$refs.focusContainer.focus();\n      this.$emit(\"reveal\");\n    },\n\n    onHidden() {\n      this.$emit(\"hide\");\n    },\n\n    closeOnExternal(event, closeOptions) {\n      if (!this.$el.contains(event.target)) {\n        this.close(closeOptions);\n      }\n    },\n\n    addCloseEventListeners() {\n      this.removeCloseEventListeners();\n\n      // Add event listeners in the next tick, otherwise they're triggered immediately\n      setTimeout(() => {\n        this.removeExternalClickListener = events.on(\"click\", document, e => {\n          this.closeOnExternal(e, { returnFocus: false });\n        });\n\n        this.removeEscListener = events.onKeydown(27, document, () => {\n          this.close({ returnFocus: true });\n        });\n\n        if (this.closeOnScroll) {\n          this.removeScrollListener = events.on(\"scroll\", document, e => {\n            this.closeOnExternal(e, { returnFocus: true });\n          });\n        }\n      }, 0);\n    },\n\n    removeCloseEventListeners() {\n      if (this.removeExternalClickListener) {\n        this.removeExternalClickListener();\n        this.removeExternalClickListener = null;\n      }\n\n      if (this.removeEscListener) {\n        this.removeEscListener();\n        this.removeEscListener = null;\n      }\n\n      if (this.removeScrollListener) {\n        this.removeScrollListener();\n        this.removeScrollListener = null;\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\">\n@import \"@/assets/sass/imports.scss\";\n@import \"@/assets/sass/tippy/tippy.scss\";\n\n.ui-popover {\n  &.is-raised {\n    box-shadow: 0 2px 4px -1px rgba(black, 0.2), 0 4px 5px 0 rgba(black, 0.14),\n      0 1px 10px 0 rgba(black, 0.12);\n  }\n\n  .ui-menu {\n    border: none;\n  }\n}\n\n.ui-popover-theme {\n  background-color: white;\n}\n</style>\n"]}]}