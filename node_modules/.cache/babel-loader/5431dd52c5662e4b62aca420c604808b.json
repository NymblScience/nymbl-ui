{"remainingRequest":"/home/runner/work/nymbl-ui/nymbl-ui/node_modules/thread-loader/dist/cjs.js!/home/runner/work/nymbl-ui/nymbl-ui/node_modules/babel-loader/lib/index.js!/home/runner/work/nymbl-ui/nymbl-ui/node_modules/eslint-loader/index.js??ref--13-0!/home/runner/work/nymbl-ui/nymbl-ui/src/helpers/util.js","dependencies":[{"path":"/home/runner/work/nymbl-ui/nymbl-ui/src/helpers/util.js","mtime":1585661990411},{"path":"/home/runner/work/nymbl-ui/nymbl-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/nymbl-ui/nymbl-ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/nymbl-ui/nymbl-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/runner/work/nymbl-ui/nymbl-ui/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _typeof from \"/home/runner/work/nymbl-ui/nymbl-ui/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nexport function isObject(obj) {\n  return obj !== null && _typeof(obj) === \"object\";\n}\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\n\nexport function looseEqual(a, b) {\n  // eslint-disable-next-line eqeqeq\n  return a == b || (isObject(a) && isObject(b) ? JSON.stringify(a) === JSON.stringify(b) : false);\n}\n/**\n * Check if a val exists in arr using looseEqual comparison\n */\n\nexport function looseIndexOf(arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n/**\n * Check if the given string starts with the query, beginning\n * at the given position\n */\n\nexport function startsWith(string, query) {\n  var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return string.substr(position, query.length) === query;\n}",{"version":3,"sources":["/home/runner/work/nymbl-ui/nymbl-ui/src/helpers/util.js"],"names":["isObject","obj","looseEqual","a","b","JSON","stringify","looseIndexOf","arr","val","i","length","startsWith","string","query","position","substr"],"mappings":";;AAAA;;;;;AAKA,OAAO,SAASA,QAAT,CAAkBC,GAAlB,EAAuB;AAC5B,SAAOA,GAAG,KAAK,IAAR,IAAgB,QAAOA,GAAP,MAAe,QAAtC;AACD;AAED;;;;;AAIA,OAAO,SAASC,UAAT,CAAoBC,CAApB,EAAuBC,CAAvB,EAA0B;AAC/B;AACA,SACED,CAAC,IAAIC,CAAL,KACCJ,QAAQ,CAACG,CAAD,CAAR,IAAeH,QAAQ,CAACI,CAAD,CAAvB,GACGC,IAAI,CAACC,SAAL,CAAeH,CAAf,MAAsBE,IAAI,CAACC,SAAL,CAAeF,CAAf,CADzB,GAEG,KAHJ,CADF;AAMD;AAED;;;;AAGA,OAAO,SAASG,YAAT,CAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AACrC,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnC,QAAIR,UAAU,CAACM,GAAG,CAACE,CAAD,CAAJ,EAASD,GAAT,CAAd,EAA6B;AAC3B,aAAOC,CAAP;AACD;AACF;;AAED,SAAO,CAAC,CAAR;AACD;AAED;;;;;AAIA,OAAO,SAASE,UAAT,CAAoBC,MAApB,EAA4BC,KAA5B,EAAiD;AAAA,MAAdC,QAAc,uEAAH,CAAG;AACtD,SAAOF,MAAM,CAACG,MAAP,CAAcD,QAAd,EAAwBD,KAAK,CAACH,MAA9B,MAA0CG,KAAjD;AACD","sourcesContent":["/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nexport function isObject(obj) {\n  return obj !== null && typeof obj === \"object\";\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nexport function looseEqual(a, b) {\n  // eslint-disable-next-line eqeqeq\n  return (\n    a == b ||\n    (isObject(a) && isObject(b)\n      ? JSON.stringify(a) === JSON.stringify(b)\n      : false)\n  );\n}\n\n/**\n * Check if a val exists in arr using looseEqual comparison\n */\nexport function looseIndexOf(arr, val) {\n  for (let i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n/**\n * Check if the given string starts with the query, beginning\n * at the given position\n */\nexport function startsWith(string, query, position = 0) {\n  return string.substr(position, query.length) === query;\n}\n"]}]}