function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

export default function getComponentsFromSections(sections) {
  return sections.reduce(function (allComponent, section) {
    var sectionComponents = [];
    var subSectionComponents = [];

    if (section.components) {
      sectionComponents = section.components;
    }

    if (section.sections) {
      subSectionComponents = getComponentsFromSections(section.sections);
    }

    return [].concat(_toConsumableArray(allComponent), _toConsumableArray(sectionComponents), _toConsumableArray(subSectionComponents));
  }, []);
}