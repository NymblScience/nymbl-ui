function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

import React from 'react';
import PropTypes from 'prop-types';
import Styled from 'rsg-components/Styled';
import Arguments from 'rsg-components/Arguments';
import Argument from 'rsg-components/Argument';
import Code from 'rsg-components/Code';
import JsDoc from 'rsg-components/JsDoc';
import Markdown from 'rsg-components/Markdown';
import Name from 'rsg-components/Name';
import Table from 'rsg-components/Table';
import getOriginColumn from 'rsg-components/OriginColumn';
import styles from '../../utils/propStyles';
import renderDefaultHoc from './renderDefault';
import renderTypeBox from './renderType';

function renderDescription(classes) {
  return function renderDesc(prop) {
    var description = prop.description,
        _prop$tags = prop.tags,
        tags = _prop$tags === void 0 ? {} : _prop$tags;
    var args = [].concat(_toConsumableArray(tags.arg || []), _toConsumableArray(tags.argument || []), _toConsumableArray(tags.param || []));
    var returnDocumentation = tags["return"] && tags["return"][0] || tags.returns && tags.returns[0];
    return React.createElement("div", null, React.createElement("div", {
      className: classes.descriptionWrapper
    }, description && React.createElement(Markdown, {
      text: description
    })), React.createElement(JsDoc, tags), args.length > 0 && React.createElement(Arguments, {
      args: args,
      heading: true
    }), returnDocumentation && React.createElement(Argument, _extends({}, returnDocumentation, {
      returns: true
    })), React.createElement("div", {
      className: classes.type
    }, renderTypeBox(prop, classes)));
  };
}

function renderName(prop) {
  var name = prop.name,
      _prop$tags2 = prop.tags,
      tags = _prop$tags2 === void 0 ? {} : _prop$tags2;
  return React.createElement(Name, {
    deprecated: !!tags.deprecated
  }, name);
}

export function getRowKey(row) {
  return row.name;
}

function renderValuesHoc(classes) {
  return function renderValues(prop) {
    return React.createElement("p", {
      className: classes.values
    }, prop.values ? prop.values.map(function (v) {
      return React.createElement(Code, {
        key: v
      }, v);
    }).reduce(function (prev, curr) {
      return [prev, ', ', curr];
    }) : '-');
  };
}

export var columns = function columns(props, classes) {
  return [{
    caption: 'Prop name',
    render: renderName,
    className: classes.name
  }, {
    caption: 'Description',
    render: renderDescription(classes),
    className: classes.description
  }].concat(_toConsumableArray(props.some(function (p) {
    return p.values;
  }) ? [{
    caption: 'Values',
    render: renderValuesHoc(classes)
  }] : []), [{
    caption: 'Default',
    render: renderDefaultHoc(classes)
  }], _toConsumableArray(getOriginColumn(props)));
};

function PropsRenderer(_ref) {
  var props = _ref.props,
      classes = _ref.classes;
  return React.createElement(Table, {
    columns: columns(props, classes),
    rows: props,
    getRowKey: getRowKey
  });
}

PropsRenderer.propTypes = {
  props: PropTypes.array.isRequired,
  classes: PropTypes.object.isRequired
};
export default Styled(styles)(PropsRenderer);