import React from 'react';
import PropTypes from 'prop-types';
import map from 'lodash/map';
import capitalize from 'lodash/capitalize';
import Markdown from 'rsg-components/Markdown';
import Styled from 'rsg-components/Styled';

var list = function list(array) {
  return array.map(function (item) {
    return item.description;
  }).join(', ');
};

var paragraphs = function paragraphs(array) {
  return array.map(function (item) {
    return item.description;
  }).join('\n\n');
};

var fields = {
  deprecated: function deprecated(value) {
    return value[0].description;
  },
  see: function see(value) {
    return paragraphs(value);
  },
  link: function link(value) {
    return paragraphs(value);
  },
  author: function author(value) {
    return list(value);
  },
  version: function version(value) {
    return value[0].description;
  },
  since: function since(value) {
    return value[0].description;
  }
};

var styles = function styles(_ref) {
  var space = _ref.space,
      color = _ref.color,
      fontFamily = _ref.fontFamily;
  return {
    wrapper: {
      color: color.base,
      fontFamily: fontFamily.base,
      fontSize: 'inherit',
      lineHeight: 1.5
    },
    name: {
      marginRight: space[1]
    }
  };
};

function JsDoc(props) {
  var classes = props.classes;
  return map(fields, function (format, field) {
    return props[field] && React.createElement("div", {
      className: "vsg-jsdoc-tag ".concat(classes.wrapper),
      key: field
    }, React.createElement("span", {
      className: "vsg-tag-name ".concat(classes.name)
    }, capitalize(field), ":"), React.createElement("span", {
      className: "vsg-tag-value ".concat(classes.value)
    }, React.createElement(Markdown, {
      text: format(props[field]),
      inline: true
    })));
  }).filter(Boolean);
}

JsDoc.propTypes = {
  classes: PropTypes.object.isRequired,
  deprecated: PropTypes.array,
  see: PropTypes.array,
  link: PropTypes.array,
  author: PropTypes.array,
  version: PropTypes.array,
  since: PropTypes.array
};
export default Styled(styles)(JsDoc);