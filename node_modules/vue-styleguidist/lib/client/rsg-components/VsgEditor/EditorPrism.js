function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { isCodeVueSfc } from 'vue-inbrowser-compiler-utils';
import Styled from 'rsg-components/Styled';
import { polyfill } from 'react-lifecycles-compat';
import SimpleEditor from 'react-simple-code-editor';
import Prism from 'prismjs/components/prism-core';
import 'prismjs/components/prism-clike';
import 'prismjs/components/prism-markup';
import 'prismjs/components/prism-javascript';
import 'prismjs/components/prism-jsx';
import { space } from 'react-styleguidist/lib/client/styles/theme';
import { useStyleGuideContext } from 'rsg-components/Context';
import prismTheme from 'react-styleguidist/lib/client/styles/prismTheme';

var highlight = function highlight(lang) {
  var langScheme = Prism.languages[lang];
  return function (code) {
    return Prism.highlight(code, langScheme, lang);
  };
};

var styles = function styles(_ref) {
  var fontFamily = _ref.fontFamily,
      fontSize = _ref.fontSize,
      color = _ref.color,
      borderRadius = _ref.borderRadius;
  return {
    root: {
      fontFamily: fontFamily.monospace,
      fontSize: fontSize.small,
      borderRadius: borderRadius,
      '& textarea': {
        isolate: false,
        transition: 'all ease-in-out .1s',
        // important to override inline styles in react-simple-code-editor
        border: "1px ".concat(color.border, " solid !important"),
        borderRadius: borderRadius
      },
      '& textarea:focus': {
        isolate: false,
        outline: 0,
        borderColor: "".concat(color.link, " !important"),
        boxShadow: [[0, 0, 0, 2, color.focus]]
      }
    },
    jssEditor: _objectSpread({
      background: color.codeBackground
    }, prismTheme({
      color: color
    }))
  };
};

export var UnconfiguredEditor =
/*#__PURE__*/
function (_Component) {
  _inherits(UnconfiguredEditor, _Component);

  function UnconfiguredEditor() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, UnconfiguredEditor);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(UnconfiguredEditor)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      code: _this.props.code,
      prevCode: _this.props.code
    });

    _defineProperty(_assertThisInitialized(_this), "handleChange", function (code) {
      _this.setState({
        code: code
      });

      _this.props.onChange(code);
    });

    return _this;
  }

  _createClass(UnconfiguredEditor, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return nextState.code !== this.state.code;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props$classes = this.props.classes,
          root = _this$props$classes.root,
          jssEditor = _this$props$classes.jssEditor;
      var isVueSFC = isCodeVueSfc(this.state.code);
      var jssThemedEditor = this.props.jssThemedEditor;
      var langClass = isVueSFC ? 'language-html' : 'language-jsx';
      return React.createElement(SimpleEditor, {
        className: cx(root, jssThemedEditor ? jssEditor : langClass, 'prism-editor'),
        value: this.state.code,
        onValueChange: this.handleChange,
        highlight: highlight(isVueSFC ? 'html' : 'jsx') // Padding should be passed via a prop (not CSS) for a proper
        // cursor position calculation
        ,
        padding: space[2] // to make sure the css styles for prism are taken into account
        ,
        preClassName: !jssThemedEditor && langClass
      });
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var code = nextProps.code;

      if (prevState.prevCode !== code) {
        return {
          prevCode: code,
          code: code
        };
      }

      return null;
    }
  }]);

  return UnconfiguredEditor;
}(Component);

_defineProperty(UnconfiguredEditor, "propTypes", {
  code: PropTypes.string.isRequired,
  jssThemedEditor: PropTypes.bool.isRequired,
  onChange: PropTypes.func.isRequired,
  classes: PropTypes.object.isRequired
});

var PEditor = polyfill(UnconfiguredEditor);

function Editor(props) {
  var _useStyleGuideContext = useStyleGuideContext(),
      jssThemedEditor = _useStyleGuideContext.config.jssThemedEditor;

  return React.createElement(PEditor, _extends({}, props, {
    jssThemedEditor: jssThemedEditor
  }));
}

export default Styled(styles)(Editor);