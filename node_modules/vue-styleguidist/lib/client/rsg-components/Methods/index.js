function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* eslint-disable react/prop-types */
import React from 'react';
import PropTypes from 'prop-types';
import Styled from 'rsg-components/Styled';
import Markdown from 'rsg-components/Markdown';
import Argument from 'rsg-components/Argument';
import Arguments from 'rsg-components/Arguments';
import Name from 'rsg-components/Name';
import JsDoc from 'rsg-components/JsDoc';
import Table from 'rsg-components/Table';
import getOriginColumn from 'rsg-components/OriginColumn';
import propStyles from '../../utils/propStyles';

var getRowKey = function getRowKey(row) {
  return row.name;
};

function renderMethodName(_ref) {
  var name = _ref.name,
      _ref$tags = _ref.tags,
      tags = _ref$tags === void 0 ? {} : _ref$tags;
  return React.createElement(Name, {
    deprecated: !!tags.deprecated
  }, "".concat(name, "()"));
}

function renderDescription(_ref2) {
  var description = _ref2.description,
      returns = _ref2.returns,
      _ref2$tags = _ref2.tags,
      tags = _ref2$tags === void 0 ? {} : _ref2$tags;
  return React.createElement("div", null, description && React.createElement(Markdown, {
    text: description
  }), returns && React.createElement(Argument, _extends({
    name: " ",
    block: true,
    returns: true
  }, returns)), React.createElement(JsDoc, tags));
}

function renderParameters(_ref3) {
  var _ref3$params = _ref3.params,
      params = _ref3$params === void 0 ? [] : _ref3$params;
  return React.createElement(Arguments, {
    args: params.map(function (p) {
      return _objectSpread({
        block: true
      }, p);
    })
  });
}

export var columns = function columns(methods, classes) {
  return [{
    caption: 'Method name',
    render: renderMethodName,
    className: classes.name
  }, {
    caption: 'Description',
    render: renderDescription,
    className: classes.description
  }, {
    caption: 'Parameters',
    render: renderParameters
  }].concat(_toConsumableArray(getOriginColumn(methods)));
};

function MethodsRenderer(_ref4) {
  var methods = _ref4.methods,
      classes = _ref4.classes;
  return React.createElement(Table, {
    columns: columns(methods, classes),
    rows: methods,
    getRowKey: getRowKey
  });
}

MethodsRenderer.propTypes = {
  methods: PropTypes.arrayOf(PropTypes.shape({
    name: PropTypes.string.isRequired,
    description: PropTypes.string,
    returns: PropTypes.object,
    params: PropTypes.array,
    tags: PropTypes.object
  })).isRequired,
  classes: PropTypes.object.isRequired
};
export default Styled(propStyles)(MethodsRenderer);