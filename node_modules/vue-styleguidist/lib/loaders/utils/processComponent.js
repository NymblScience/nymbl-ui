"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = processComponent;

var _vueTemplateCompiler = require("vue-template-compiler");

var fs = _interopRequireWildcard(require("fs"));

var path = _interopRequireWildcard(require("path"));

var _getNameFromFilePath = _interopRequireDefault(require("react-styleguidist/lib/loaders/utils/getNameFromFilePath"));

var _requireIt = _interopRequireDefault(require("react-styleguidist/lib/loaders/utils/requireIt"));

var _slugger = _interopRequireDefault(require("react-styleguidist/lib/loaders/utils/slugger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const vueDocLoader = path.resolve(__dirname, '../vuedoc-loader.js');
/**
 * References the filepath of the metadata file.
 *
 * @param {string} filepath
 * @returns {object}
 */

function getComponentMetadataPath(filepath) {
  const ext = path.extname(filepath);
  return filepath.substring(0, filepath.length - ext.length) + '.json';
}
/**
 * Return an object with all required for style guide information for a given component.
 *
 * @param {string} filepath
 * @param {object} config
 * @returns {object}
 */


function processComponent(filepath, config) {
  const componentPath = path.relative(config.configDir || '', filepath);
  const componentName = (0, _getNameFromFilePath.default)(filepath);
  const props = (0, _requireIt.default)(`!!${vueDocLoader}!${filepath}`);
  const examplesFile = config.getExampleFilename(filepath);
  const componentMetadataPath = getComponentMetadataPath(filepath);
  const hasExamplesFile = examplesFile && fs.existsSync(examplesFile);
  let hasInternalExamples = false;

  if (!hasExamplesFile && fs.existsSync(componentPath)) {
    const customBlocks = (0, _vueTemplateCompiler.parseComponent)(fs.readFileSync(componentPath, 'utf8')).customBlocks;
    hasInternalExamples = !!customBlocks && customBlocks.findIndex(p => p.type === 'docs') >= 0;
  }

  const hasExamples = hasExamplesFile || hasInternalExamples;
  return {
    filepath: componentPath,
    slug: _slugger.default.slug(componentName),
    pathLine: config.getComponentPathLine(componentPath),
    module: (0, _requireIt.default)(filepath),
    props,
    hasExamples,
    metadata: fs.existsSync(componentMetadataPath) ? (0, _requireIt.default)(componentMetadataPath) : {}
  };
}