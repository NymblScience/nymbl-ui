"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.vuedocLoader = vuedocLoader;

var path = _interopRequireWildcard(require("path"));

var _escodegen = require("escodegen");

var _toAst = _interopRequireDefault(require("to-ast"));

var _glogg = _interopRequireDefault(require("glogg"));

var _vueDocgenApi = require("vue-docgen-api");

var _sortProps = _interopRequireDefault(require("react-styleguidist/lib/loaders/utils/sortProps"));

var _requireIt = _interopRequireDefault(require("react-styleguidist/lib/loaders/utils/requireIt"));

var _getExamples = _interopRequireDefault(require("./utils/getExamples"));

var _getComponentVueDoc = _interopRequireDefault(require("./utils/getComponentVueDoc"));

var _findOrigins = _interopRequireDefault(require("./utils/findOrigins"));

var _stripOutOrigins = _interopRequireDefault(require("./utils/stripOutOrigins"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const logger = (0, _glogg.default)('vsg');
const examplesLoader = path.resolve(__dirname, './examples-loader.js');

function _default(source) {
  const callback = this.async();
  const cb = callback ? callback : () => null;
  vuedocLoader.call(this, source).then(res => cb(undefined, res)).catch(e => {
    throw e;
  });
}

function makeObject(set) {
  if (!set) return undefined;
  return set.reduce((acc, item) => {
    acc[item.name] = item;
    return acc;
  }, {});
}

async function vuedocLoader(source) {
  const file = this.request.split('!').pop();
  if (!file) return;
  const config = this._styleguidist; // Setup Webpack context dependencies to enable hot reload when adding new files or updating any of component dependencies

  if (config.contextDependencies) {
    config.contextDependencies.forEach(dir => this.addContextDependency(dir));
  }

  const webpackConfig = config.webpackConfig ? config.webpackConfig : {};
  let alias;
  let modules;

  if (webpackConfig.resolve) {
    alias = webpackConfig.resolve.alias;
    modules = webpackConfig.resolve.modules;
  }

  const defaultParser = async file => await (0, _vueDocgenApi.parse)(file, {
    alias,
    modules,
    jsx: config.jsxInComponents,
    validExtends: config.validExtends
  });

  const propsParser = config.propsParser || defaultParser;
  let docs = {
    displayName: '',
    exportName: ''
  };

  try {
    docs = await propsParser(file);
  } catch (e) {
    const componentPath = path.relative(process.cwd(), file);
    logger.warn(`Error parsing ${componentPath}: ${e}`);
  } // set dependency tree for mixins an extends


  const originFiles = (0, _findOrigins.default)(docs);
  const basedir = path.dirname(file);
  originFiles.forEach(extensionFile => {
    this.addDependency(path.join(basedir, extensionFile));
  }); // strip out origins if config is set to false to
  // keep origins from displaying

  if (!config.displayOrigins) {
    (0, _stripOutOrigins.default)(docs);
  }

  let vsgDocs = _objectSpread({}, docs, {
    events: makeObject(docs.events),
    slots: makeObject(docs.slots)
  });

  const componentVueDoc = (0, _getComponentVueDoc.default)(source, file);
  const isComponentDocInVueFile = !!componentVueDoc;

  if (componentVueDoc) {
    vsgDocs.example = (0, _requireIt.default)(`!!${examplesLoader}?customLangs=vue|js|jsx!${file}`);
  } else if (docs.tags) {
    const examples = docs.tags.examples;

    if (examples) {
      const examplePath = examples[examples.length - 1].content;

      if (examples.length > 1) {
        logger.warn(`More than one @example tags specified in component ${path.relative(process.cwd(), file)}\nUsing the last tag to build examples: '${examplePath}'`);
      }

      vsgDocs.example = (0, _requireIt.default)(`!!${examplesLoader}?customLangs=vue|js|jsx!${examplePath}`);
    }
  }

  if (docs.props) {
    const filteredProps = docs.props.filter(prop => !prop.tags || !prop.tags.ignore);
    const sortProps = config.sortProps || _sortProps.default;
    vsgDocs.props = filteredProps ? sortProps(filteredProps) : undefined;
  }

  const examplesFile = config.getExampleFilename ? config.getExampleFilename(file) : false;
  vsgDocs.examples = (0, _getExamples.default)(file, examplesFile, docs.displayName, config.defaultExample, isComponentDocInVueFile);

  if (config.updateDocs) {
    vsgDocs = config.updateDocs(vsgDocs, file);
  }

  return `
		if (module.hot) {
			module.hot.accept([])
		}

		module.exports = ${(0, _escodegen.generate)((0, _toAst.default)(vsgDocs))}
	`;
}