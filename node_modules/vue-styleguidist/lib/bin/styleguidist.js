#!/usr/bin/env node

/* eslint-disable no-console */
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _minimist = _interopRequireDefault(require("minimist"));

var _kleur = _interopRequireDefault(require("kleur"));

var _glogg = _interopRequireDefault(require("glogg"));

var _error = _interopRequireDefault(require("react-styleguidist/lib/scripts/utils/error"));

var _config = _interopRequireDefault(require("../scripts/config"));

var _consts = _interopRequireDefault(require("../scripts/consts"));

var binutils = _interopRequireWildcard(require("../scripts/binutils"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var logger = (0, _glogg["default"])('vsg-bin');
var argv = (0, _minimist["default"])(process.argv.slice(2));
var command = argv._[0]; // Do not show nasty stack traces for Styleguidist errors

process.on('uncaughtException', function (err) {
  if (err.code === 'EADDRINUSE') {
    binutils.printErrorWithLink("Another server is running at port ".concat(config.serverPort, " already. Please stop it or change the default port to continue."), 'You can change the port using the `serverPort` option in your style guide config:', _consts["default"].DOCS_CONFIG);
  } else if (err instanceof _error["default"]) {
    console.error(_kleur["default"].bold.red(err.message));

    if (err.stack) {
      logger.debug(err.stack);
    }
  } else {
    console.error(err.toString());
    console.error(err.stack);
  }

  process.exit(1);
}); // Make sure user has webpack installed

require('react-styleguidist/lib/scripts/utils/ensureWebpack'); // Set environment before loading style guide config because userâ€™s webpack config may use it


var env = command === 'build' ? 'production' : 'development';
process.env.NODE_ENV = process.env.NODE_ENV || env; // Load style guide config

var config;

try {
  config = (0, _config["default"])(argv.config, binutils.updateConfig);
  process.env.VUESG_VERBOSE = argv.verbose;
  binutils.verbose('Styleguidist config:', config);

  switch (command) {
    case 'build':
      binutils.commandBuild(config);
      break;

    case 'server':
      binutils.commandServer(config, argv.open);
      break;

    default:
      binutils.commandHelp();
  }
} catch (err) {
  if (err instanceof _error["default"]) {
    var link = _consts["default"].DOCS_CONFIG + (err.anchor ? "#".concat(err.anchor.toLowerCase()) : '');
    binutils.printErrorWithLink(err.message, "".concat(err.extra, "\n\nLearn how to configure your style guide:"), link);
    process.exit(1);
  } else {
    throw err;
  }
}